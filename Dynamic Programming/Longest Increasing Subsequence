# Tabulation
# TC - O(n^2), SC - O(n)

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        n = len(nums)
        memo = [1] *  n
        
        for i in range(n):
            for j in range(i):
                if nums[i] > nums[j] and memo[i] < memo[j] + 1:
                    memo[i] = memo[j] + 1
                    
        maxVal = 0
        
        for val in memo:
            maxVal = max(maxVal, val)
            
        return maxVal 
    
    
# #############################################################
 
# Binary Search Modification
# TC - O(n log n), SC - O(n)    
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        n = len(nums)
        memo = [nums[0]]
        
        for i in range(1, n):
            if nums[i] > memo[-1]:
                memo.append(nums[i])
            else:
                idx = bisect_left(memo, nums[i])
                memo[idx] = nums[i]
                    
        return len(memo)
    
############################################################

# Recursion
# TC - O(2^n), SC - O(1)

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        def solve(nums, index, prev):
            if index >= len(nums):
                return 0
            take = 0
            dontTake = solve(nums, index+1, prev)
            if nums[index] > prev:
                take =  1 + solve(nums, index+1, nums[index])
            
            return max(take, dontTake)
        
        return solve(nums, 0 , -inf)
        
############################################################

# Recursion with Memoization
# TC - O(n^2), SC - O(n^2)

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        memo = {}
        def solve(nums, index, prev):
            if index >= len(nums):
                return 0
            
            if (index, prev+1) in memo:
                return memo[(index, prev+1)]
            
            take = 0
            dontTake = solve(nums, index+1, prev)
            if prev == -1 or nums[index] > nums[prev]:
                take = 1 + solve(nums, index+1, index)
            
            memo[(index, prev+1)] = max(take, dontTake)
            return memo[(index, prev+1)]
        
        return solve(nums, 0, -1)    
        
        
# ###########################################################
# class Solution:
#     maxCount = 0
#     def lengthOfLIS(self, nums: List[int]) -> int:
#         def dfs(nums, n, count):
#             self.maxCount = max(self.maxCount, count)
            
#             if nums == []:
#                 return count
#             for i in range(len(nums)):
#                 if n < nums[i]:
#                     dfs(nums[i+1:], nums[i], count+1)
                    
#             return self.maxCount 
        
#         for i in range(len(nums)):
#             dfs(nums[i+1:], nums[i], 1)
        
#         return self.maxCount
                
# ###########################################################

# class Solution:
#     maxCount = 0
#     def lengthOfLIS(self, nums: List[int]) -> int:
#         def dfs(index, n, count):
#             self.maxCount = max(self.maxCount, count)
            
#             if index == len(nums):
#                 return count
            
#             for i in range(index, len(nums)):
#                 if n < nums[i]:
#                     dfs(i+1, nums[i], count+1)
                    
#             return self.maxCount 
        
#         for i in range(len(nums)):
#             dfs(i, nums[i], 1)
        
#         return self.maxCount
            
# ###########################################################

# class Solution:
#     def lengthOfLIS(self, nums: List[int]) -> int:
#         memo = {}
#         def dfs(index, n, count):
#             maxCount = count
#             if (n, index) in memo:
#                 return memo[(n, index)]
            
#             if index == len(nums):
#                 return count
            
#             for i in range(index, len(nums)):
#                 if n < nums[i]:
#                     maxCount = max(maxCount, dfs(i+1, nums[i], count+1))
            
#             memo[(n, index)] = maxCount
#             return maxCount
        
#         m = 0
#         for i in range(len(nums)):
#             m = max(m, dfs(i, nums[i], 1))
        
#         # print(memo)
#         return m           


