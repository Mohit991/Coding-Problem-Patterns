Solution 1: DP Using Memoization and Recursion:    https://leetcode.com/problems/decode-ways/discuss/608268/Python-Thinking-process-diagram-(DP-%2B-DFS)
https://leetcode.com/problems/decode-ways/discuss/1411484/Detailed-Explanation-oror-C%2B%2B-oror-DP-with-Memoization
TC - O(n), SC - O(n)

Solution 2: DP Using Tabulation:    https://leetcode.com/problems/decode-ways/discuss/30358/Java-clean-DP-solution-with-explanation
TC - O(n), SC - O(n)

###################################################################################################################################################


# DP With Memoization:
# Time : O(N)
# Space : O(N)

class Solution:
    def numDecodings(self, s: str) -> int:
        def decode(index, memo):
            if index in memo:
                return memo[index]
            
            if index >= len(s):
                return 1
            
            ways = 0
            if s[index] != '0':
                ways += decode(index+1, memo)
                
            if index+1 < len(s) and int(s[index:index+2]) <= 26 and int(s[index:index+2]) >= 10:
                ways += decode(index+2, memo)
            
            memo[index] = ways
            return ways    
           
        return decode(0, {})

##################################################################

# DP With Memoization:
# Time : O(N)
# Space : O(N)
    
# class Solution:
#     def numDecodings(self, s: str) -> int:
#         def decode(s, index, temp, memo):
            
#             if index == len(s) and int(temp) <= 26:
#                 return 1
#             if index > len(s):
#                 return 0
#             if temp != '' and int(temp) > 26:
#                 return 0
#             if s[index] == '0':
#                 return 0
#             if index in memo:
#                 # print(memo)
#                 return memo[index]
            
#             x = decode(s, index+1, s[index], memo)
#             y = decode(s, index+2, s[index:index+2], memo)
#             memo[index] = x + y
#             return x + y
        
        
#         return decode(s, 0, '', {})
    
##################################################################      

# DP With Tabulation:
# Time : O(N)
# Space : O(N)

class Solution:
    def numDecodings(self, s: str) -> int:
        memo = [0]*(len(s)+1)
        memo[0] = 1
        if s[0] != '0':
            memo[1] = 1  
        else: return 0
        
        for i in range(2, len(s)+1):
            if s[i-1] != '0':
                memo[i] += memo[i-1]    
            if int(s[i-2:i]) <= 26 and int(s[i-2:i]) >= 10:
                memo[i] += memo[i-2]
                
                
        return memo[len(s)]      

            
