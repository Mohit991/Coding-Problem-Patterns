#Explanation: https://leetcode.com/problems/house-robber/discuss/156523/From-good-to-great.-How-to-approach-most-of-DP-problems.

# class Solution:
#     def rob(self, nums: List[int]) -> int:
#         def dfs(nums):
#             if nums == []:
#                 return 0

#             sum1 = dfs(nums[1:])
#             sum2 = dfs(nums[2:]) + nums[0]
            
#             return sum1 if sum1>sum2 else sum2
                
#         return dfs(nums)     
        
        
################################################

# class Solution:
#     def rob(self, nums: List[int]) -> int:
#         def dfs(index):
#             if index >= len(nums):
#                 return 0

#             sum1 = dfs(index + 1)
#             sum2 = dfs(index + 2) + nums[index]
            
#             return sum1 if sum1>sum2 else sum2
                
#         return dfs(0)   

 ####################################################
    
# class Solution:
#     def rob(self, nums: List[int]) -> int:
#         def dfs(index, memo):
#             if index in memo:
#                 return memo[index]
#             if index >= len(nums):
#                 return 0

#             sum1 = dfs(index + 1, memo)
#             sum2 = dfs(index + 2, memo) + nums[index]
#             memo[index] =  sum1 if sum1>sum2 else sum2
            
#             return memo[index]
                
#         return dfs(0, {})   

#####################################################3

# class Solution:
#     def rob(self, nums: List[int]) -> int:
#         if nums == []: return 0
#         if len(nums) == 1: return nums[0]
        
#         memo = [0]*(len(nums) + 1)
        
#         memo[1] = nums[0]
        
#         for i in range(2, len(memo)):
#             memo[i] = max(memo[i-1], memo[i-2] + nums[i-1])
            
#         return memo[-1]    
    
######################################################

class Solution:
    def rob(self, nums: List[int]) -> int:
        if nums == []: return 0
        if len(nums) == 1: return nums[0]
        
        lastToLast = 0
        
        last = nums[0]
        
        for i in range(1, len(nums)):
            temp = last
            last = max(last, lastToLast + nums[i])
            lastToLast = temp
            
        return last 
            
