#1. Recursion Without DP. Here we will write two base cases. If nums gets empty and target gets 0 , we find one 
#Way and we return 1. If nums gets empty but tagret have not been reduced to zero, we return 1.
#And for recursion, one time we take the postive value of the number from num and one time we take the nagative
#value of the number. We increment the index and pass the rest of the array. 

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        def dfs(nums, target):
            if nums == [] and target == 0:
                return 1
            if nums == []:
                return 0
            n = dfs(nums[1:], target - nums[0])
            p = dfs(nums[1:], target + nums[0])
            return n+p
        return dfs(nums, target)

#######################################################################

#2. Recursion Without DP.

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        def dfs(nums, index, target):
            if index == len(nums) and target == 0:
                return 1
            if index == len(nums):
                return 0
            n = dfs(nums, index+1, target - nums[index])
            p = dfs(nums, index+1, target + nums[index])
            return n+p
        return dfs(nums, 0, target)

######################################################################

#3. Recursion With DP. 
#In order to apply recursion, we need to store (index, target) in map and value will be the number of ways to
#get the target with the array till given index. Because here we must remember not just of tagrget and result,
#but also at what height that target was achived. 

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        def dfs(nums, index, target, memo):
            if (index, target) in memo:
                return memo[(index, target)]
            if index == len(nums) and target == 0:
                return 1
            if index == len(nums):
                return 0
            n = dfs(nums, index+1, target - nums[index], memo)
            p = dfs(nums, index+1, target + nums[index], memo)
            memo[(index, target)] = n+p
            return n+p
        return dfs(nums, 0, target, {})


#####################################################################

# #4. Tabulation Using 2D Array.
# The original problem statement is equivalent to:
# Find a subset of nums that need to be positive, and the rest of them negative, such that the sum is equal
# to  target

# Let P be the positive subset and N be the negative subset
# For example:
# Given nums = [1, 2, 3, 4, 5] and target = 3 then one possible solution is +1-2+3-4+5 = 3
# Here positive subset is P = [1, 3, 5] and negative subset is N = [2, 4]

# Then let's see how this can be converted to a subset sum problem:

                  # sum(P) - sum(N) = target
# sum(P) + sum(N) + sum(P) - sum(N) = target + sum(P) + sum(N)
                       # 2 * sum(P) = target + sum(nums)
# So the original problem has been converted to a subset sum problem as follows:
# Find a subset P of nums such that sum(P) = (target + sum(nums)) / 2

# Note that the above formula has proved that target + sum(nums) must be even
# We can use that fact to quickly identify inputs that do not have a solution 
# For detailed explanation on how to solve subset sum problem, you may refer to Partition Equal Subset Sum

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        sumOfNums = sum(nums)
        n = len(nums)    
        if (sumOfNums + target) & 1 or (sumOfNums + target) < 0: return 0
        target = (sumOfNums + target) >> 1  
        row, col = n+1, target+1
        memo = [[0 for i in range(col)] for j in range(row)]       
        memo[0][0] = 1       
        for i in range(1, row):
            for j in range(col):
                if j - nums[i-1] >= 0:
                    memo[i][j] += memo[i-1][j - nums[i-1]]
                memo[i][j] += memo[i-1][j]                
        return memo[-1][-1]                 
                    
############################################################################


#4. Tabulation Using 1D Array.

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        sumOfNums = sum(nums)
        n = len(nums)
        
        if (sumOfNums + target) & 1 or (sumOfNums + target) < 0: return 0
        
        target = (sumOfNums + target) >> 1
        
        row = target+1
        memo = [0 for i in range(row)]
        
        memo[0]= 1
        
        for n in nums:
            for j in range(row-1, -1, -1):
                if j>=n:
                    memo[j] += memo[j - n] 
                
        return memo[-1]    
        
        
        
        
        
