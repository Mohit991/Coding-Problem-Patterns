# #Brute Force Solution
# #TLE
class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        maxCount = 0
        maxPalid = ''
        for i in range(n):
            for j in range(i, n):
                count = 0
                t1 = i
                t2 = j
                while t1 <= t2:
                    if s[t1] != s[t2]:
                        break
                    
                    if t1 == t2: count += 1
                    else: count += 2
                    t1 += 1
                    t2 -= 1
                
                if count > maxCount and t1 > t2:
                    maxCount = count
                    maxPalin = s[i:j+1]
                    
        return maxPalin

##################################################################

#Brute Force Solution
#TLE

class Solution:
    def longestPalindrome(self, s: str) -> str:
        def findPalindrome(s, left, right):
            l,r = left, right
            while left <= right and s[left] == s[right]:
                left += 1
                right -= 1
                
            return r - l + 1 if left > right else 0
        
        n = len(s)
        maxCount = 0
        maxPalin = ''
        for i in range(n):
            for j in range(i, n):
                count = findPalindrome(s, i, j)  
                if count > maxCount:
                    maxCount = count
                    maxPalin = s[i:j+1]
                    
        return maxPalin  
    
# ##################################################################

class Solution:
    def longestPalindrome(self, s: str) -> str:
        def findPalindrome(s, left, right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
                
            return s[left+1:right]
        
        res = ''
        for i in range(len(s)):
            temp = findPalindrome(s,i,i)
            if len(temp) > len(res):
                res = temp
                
            temp = findPalindrome(s,i,i+1)
            if len(temp) > len(res):
                res = temp
                
        
        
        return res

##################################################################

class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s) == 1: return s
        res = ''
        for i in range(len(s)-1):
            left, right = i, i
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
                         
            if right - left > len(res):
                res = s[left+1:right]
            
            if s[i] == s[i+1]:
                left, right = i, i+1
                while left >= 0 and right < len(s) and s[left] == s[right]:
                    left -= 1
                    right += 1
            
            if right - left > len(res):
                res = s[left+1:right]

        return res                
        
        
##################################################################

class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ''
        for i in range(len(s)):
            right  = i
            while right < len(s) and s[right] == s[i]:
                right += 1
                
            left = i - 1
            
            while left >= 0 and right < len(s) and s[right] == s[left]:
                left -= 1
                right += 1
                
            if right - left > len(res):
                res = s[left+1:right]
        return res         
