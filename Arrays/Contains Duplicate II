# Explanation: We will have a freq dict which will have freq of every element in the list. 
# for duplicated elements, it will have all the indexes. 
# As we go through the list, if we have seen this element before, we will check its last index
# using the dict and if last index and current index satisfy the condition we will return True.

class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        freq = defaultdict(list)
        for i in range(len(nums)):
            if nums[i] in freq:
                if abs(i - freq[nums[i]][-1]) <= k:
                    return True
            freq[nums[i]].append(i)
                
        return False
                
############################################################################################

# Explanation: It iterates over the array using a sliding window. The front of the window is at i, the rear of the window is k steps back. The elements within that window are maintained using a Set. If new element is in set, At that point, we return true. If the control reaches out of for loop, it means that inner return true never executed, meaning no such duplicate element was found.

class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        setOfLastK = set()
        
        for i in range(len(nums)):
            #remove element if its distance to nums[i] is not lesser than k
            if i > k:
                setOfLastK.remove(nums[i-k-1]) 
            if nums[i] in setOfLastK:
                return True
            
            setOfLastK.add(nums[i])
            
        return False
        
