# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

#Solution: We will take two ptrs fast and slow. First write the corner cases to avoid bugs. 
#Now run fast twice as much as slow; where fast and slow meet, stop there. Now make fast = head
#and move fast with same speed as slow; where they meet that is the point of the cycle. 

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next or not head.next.next:
            return None
        
        fast = head.next.next
        slow = head.next
        
        while fast != None and fast.next != None and fast != slow:
            fast = fast.next.next
            slow = slow.next
        
        if fast == None or fast.next == None:
            return None
        
        fast = head
        while fast != slow:
            fast = fast.next
            slow = slow.next
        
        return fast
        
        
        
