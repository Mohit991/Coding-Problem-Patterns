# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# Solution: Get to the middle of the list using slow and fast pointers. put second half of the list into a 
#stack. Now start from the front of list and comapre all elements from front with popped element of stack. 
#If they are not equal then you not palindrome.
# TC - O(n), SC- O(n)

class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        slow, fast = head, head
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        stack = [] 
        
        while slow != None:
            stack.append(slow.val)
            slow = slow.next
        
        ptr = head
        while stack:
            if stack.pop() != ptr.val:
                return False
            ptr = ptr.next
            
        return True
        
##################################################

#Solution: Get to the middle of the list. Reverse the back half of the list. Compare front and back end and you
#will know if palindrome or not. 

# class Solution:
#     def isPalindrome(self, head: ListNode) -> bool:
#         #Getting to the middle of the list
#         slow, fast, prev = head, head, None
#         while fast and fast.next:
#             slow, fast = slow.next, fast.next.next
            
#         #Reversing the back half of the list.
#         prev, slow, prev.next = slow, slow.next, None
#         while slow:
#             slow.next, prev, slow = prev, slow, slow.next
            
#         #Set slow of fast pointers
#         fast, slow = head, prev
        
#         #Compare
#         while slow:
#             if fast.val != slow.val: return False
#             fast, slow = fast.next, slow.next
#         return True
            

        
