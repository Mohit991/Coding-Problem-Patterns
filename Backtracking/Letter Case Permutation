class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        result = []
        
        def backtrack(index, string):
            while index < len(s) and not s[index].isalpha():
                string += s[index]
                index += 1
                
            if index < len(s):
                backtrack(index+1, string+s[index].upper())
                backtrack(index+1, string+s[index].lower())
            else:
                result.append(string)
                return
 
        backtrack(0, '')
        return result
    
    
    
###########################################################################

class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        result = []
        
        def backtrack(index, string):
            if index >= len(s):
                result.append(string)
                return
            
            if s[index].isalpha():
                backtrack(index+1, string+s[index].upper())
                backtrack(index+1, string+s[index].lower())
            else:
                backtrack(index+1, string+s[index])
                
        backtrack(0, '')
        return result
