# Explanation: https://leetcode.com/problems/max-consecutive-ones-iii/discuss/692111/Simple-C%2B%2B-explanation-for-easy-understanding-%3A-O(n)-time-and-O(1)-space

# We move from 0 to n. We keep counting 0s. If zeroCount <= k then we capture the window size.
# If zeroCount > k then we shrink the window by moving the start pointer. As long as zeroCount > k
# we keep moving the start pointer. Once we come out of the loop, we have a valid window in our hands.

class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        start, end = 0, 0 #start to end is the window
        maxConsecutiveOnes = 0
        zeroCount = 0
        
        while end < len(nums):
            if nums[end] == 0:
                zeroCount += 1
            
            while zeroCount > k: #Invalid window, we have to make it valid by shirnking it from start
                if nums[start] == 0:
                    zeroCount -= 1
                start += 1
            
            #After the while, when we get to this point, window will be valid
            #Valid means zeroCount <= k
            maxConsecutiveOnes = max(maxConsecutiveOnes, end - start + 1)
            end += 1
        return maxConsecutiveOnes
            
                
