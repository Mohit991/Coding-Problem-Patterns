
# Optimized: We will sort the array. Now we take every element and for each element we will take three pointers
#left = element, mid = left + 1 and right = last elemnt. Now for each left we will move right and mid.
#We find sum = nums[left] + nums[right] + nums[mid], we find diff = abs(target - sum). If this difference
#is less than the minDiff then we update minDiff and put resultSum = sum. If sum == target, we simply 
#return target. If it sum > target, then we do right - 1 because we need to reduce the sum.
#if sum < 0 then we do mid + 1 because we need to increase the sum. We will do the same for all the numbers.
# We can apply many optimizations in this. eg if left > 0 and left and left - 1 are same then we can skip 
# this current element. 
# TC - O(n^2), SC - O(1)

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        minDiff = inf
        resultSum = 0
        nums.sort()
        
        for left in range(len(nums)-2):
            mid = left + 1
            right = len(nums) - 1
            #optimization
            if left > 0 and nums[left] == nums[left-1]:
                continue
            while mid < right:
                sum = nums[left] + nums[right] + nums[mid]
                diff = abs(target - sum)
                if diff < minDiff:
                    minDiff = diff
                    resultSum = sum
                    
                if sum == target:
                    return target
                
                if sum > target:
                    right -= 1
                else:
                    mid += 1
                    
        return resultSum
        
