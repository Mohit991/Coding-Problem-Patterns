# Brute Force Solution:
# TC - O(n^3), SC - O(1)

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = set()
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                for k in range(j+1, len(nums)):
                    if nums[i] + nums[j] + nums[k] == 0:
                        result.add(tuple(sorted([nums[i], nums[j], nums[k]])))       
        return result

######################################################################################

# Optimized: We will store all the elements and their index in a map. Now we will apply two loops and take 
#every pairs. And we will try to find third number in the map. If we get that then add to result. 
# TC - O(n^2), SC - O(1)

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        memo = {}
        for i in range(len(nums)):
            memo[nums[i]] = i
            
        result = set()
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if -1 * (nums[i] + nums[j]) in memo and memo[-1 * (nums[i] + nums[j])] not in (i, j):
                    result.add(tuple(sorted([nums[i], nums[j], -1 * (nums[i] + nums[j])])))
                    
        return result

# ######################################################################################

# Optimized: We will sort the array. Now we take every element and for each element we will take three pointers
#left = element, mid = left + 1 and right = last elemnt. Now for each left we will move right and mid. 
#If sum of left, right and mid is == 0 we have the solution. Add this to result. Sort this and add as tuple in set to avoid duplicates.
#If sum > 0 then we do right - 1 because we want to reduce the sum. 
#if sum < 0 then it is mid + 1 because we want to increase the sum. We will do the same for all the numbers. We can apply many optimizations in 
#this. eg if left > 0 and left and left - 1 are same then we can skip this current element. 
# TC - O(n^2), SC - O(1)

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        result = set()
        for left in range(len(nums) - 2):
            if left > 0 and nums[left] == nums[left - 1]:
                continue
            mid = left + 1
            right = len(nums) - 1
            while mid < right:
                sum = nums[left] + nums[mid] + nums[right]
                if sum == 0:
                    result.add(tuple([nums[left],nums[mid],nums[right]]))
                    mid += 1
                    right -= 1
                elif sum < 0:
                    mid += 1
                else:
                    right -= 1
                    
        return result            
                    
######################################################################################

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = set()
        
        #1. Split nums into three lists: negative numbers, positive numbers, and zeros
        positiveNums = []
        negativeNums = []
        zeros = []
        for n in nums:
            if n > 0:
                positiveNums.append(n)
            elif n < 0:
                negativeNums.append(n)
            else:
                zeros.append(n)
                
        #2. Create a separate set for negatives and positives for O(1) look-up times
        negativeSet = set(negativeNums)
        positiveSet = set(positiveNums)
        
        #3. If there is at least 1 zero in the list, add all cases where -num exists in N and num exists in P
	    #i.e. (-3, 0, 3) = 0
        if zeros:
            for positive in positiveNums:
                for negative in negativeNums:
                    if positive == -1*negative:
                        result.add(tuple(sorted([negative, 0, positive])))
        
        #3. If there are at least 3 zeros in the list then also include (0, 0, 0) = 0
        if len(zeros) >= 3:
            result.add((0,0,0))
            
        
        #4. For all pairs of negative numbers (-3, -1), check to see if their complement (4)
	    #exists in the positive number set
        for i in range(len(positiveNums)):
            for j in range(i+1, len(positiveNums)):
                if -1 * (positiveNums[i] + positiveNums[j]) in negativeSet:
                    result.add(tuple(sorted([positiveNums[i], positiveNums[j], -1 * (positiveNums[i] + positiveNums[j])])))
                
        
        #5. For all pairs of positive numbers (1, 1), check to see if their complement (-2)
	    #exists in the negative number set
        for i in range(len(negativeNums)):
            for j in range(i+1, len(negativeNums)):
                if -1 * (negativeNums[i] + negativeNums[j]) in positiveSet:
                    result.add(tuple(sorted([negativeNums[i], negativeNums[j], -1 * (negativeNums[i] + negativeNums[j])])))     

                    
        return result            
                
    
