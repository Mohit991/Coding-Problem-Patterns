# class Solution:
#     def sortedSquares(self, nums: List[int]) -> List[int]:
#         ans = [0] * len(nums)
#         i = 0 
#         j = 0
#         while i < len(nums) and nums[i] < 0:
#             i += 1
#         j = i - 1 
           
#         for k in range(len(ans)):
#             if i < len(nums) and nums[i] * nums[i] < nums[j] * nums[j]:
#                 ans[k] = nums[i] * nums[i]
#                 i += 1
#             else:
#                 ans[k] = nums[j] * nums[j]
#                 j -= 1
            
#         return ans


#########################################################################

#Take two pointers from both extreams. i starts from 0 and j start from len(nums) - 1. Create answer array of 
#size nums. Start filling the answer array from the end. num[i] squared of nums[j] squared, whichever is greater
#take that value and put it in ans and increment i or decrement j accordingly. 
# The crux over here is that the array is already sorted. We are comparing the first and last elements because
# after square these have the possibility of being the highest element. Both the extremes contain the max 
# element (after square ofc), so we are inserting these elements to the last of the new array to make it sorted.

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        ans = [0] * len(nums)
        i = 0
        j = len(nums) - 1
        
        for k in range(len(ans)-1, -1, -1):
            if nums[i] * nums[i] > nums[j] * nums[j]:
                ans[k] = nums[i] * nums[i] 
                i += 1
            else:
                ans[k] = nums[j] * nums[j] 
                j -= 1
        
        return ans
