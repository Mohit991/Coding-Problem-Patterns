# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

# Use the slow and fast pointer method to find the mid of the LL.
# Make sure to write code such that you return the correct node for mid in case of 
# odd and even list. 
# delete mid.

class Solution:
    def getMid(self, head):
        slow, fast = head, head
        prev = head
        while fast.next and fast.next.next:
            prev = slow
            slow = slow.next
            fast = fast.next.next
            if not fast.next: #odd length list
                return prev
            if not fast.next.next: #even length list
                return slow
        return slow 
    
    def deleteMiddle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head.next: #only one node.
            return None
        
        mid = self.getMid(head)
        mid.next = mid.next.next
        return head
