# class Solution:
#     def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
#         result = 0
#         for i in range(len(nums)):
#             product = nums[i]
#             if product < k:
#                     result += 1
#             for j in range(i+1, len(nums)):
#                 product *= nums[j]
#                 if product < k:
#                     result += 1
#                 else:
#                     break
#         return result
        
#########################################################################

# The idea is always keep an max-product-window less than K;
# Every time shift window by adding a new number on the right(j), if the product is greater than k, 
# then try to reduce numbers on the left(i), until the subarray product fit less than k again, 
# (subarray could be empty);
# Each step introduces x new subarrays, where x is the size of the current window (j + 1 - i);
# example:
# for window (5, 2), when 6 is introduced, it add 3 new subarray: (5, (2, (6)))
  #       (6)
  #    (2, 6)
  # (5, 2, 6)
    #TC - O(n), SC - O(1)
class Solution:
    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
        if k == 0:
            return 0
        count = 0
        product = 1
        left, right = 0, 0
        while right < len(nums):
            product *= nums[right]
            while left <= right and product >= k:
                product /= nums[left]
                left += 1
            count += right - left + 1
            right += 1
        return count
